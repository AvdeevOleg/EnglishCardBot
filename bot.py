import random
import psycopg2
from telebot import types, TeleBot, custom_filters
from telebot.storage import StateMemoryStorage
from telebot.handler_backends import State, StatesGroup
from config import DB_CONFIG, TOKEN

print('–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...')

state_storage = StateMemoryStorage()
bot = TeleBot(TOKEN, state_storage=state_storage)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = psycopg2.connect(**DB_CONFIG)
cur = conn.cursor()

class Command:
    ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'
    DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô'
    NEXT = '–î–∞–ª—å—à–µ ‚è≠'

class MyStates(StatesGroup):
    target_word = State()
    translate_word = State()
    another_words = State()

def user_exists(uid):
    cur.execute("SELECT id FROM users WHERE telegram_id = %s;", (uid,))
    return cur.fetchone() is not None

def get_user_id(uid):
    cur.execute("SELECT id FROM users WHERE telegram_id = %s;", (uid,))
    user = cur.fetchone()
    return user[0] if user else None

def get_user_step(uid):
    cur.execute("SELECT id FROM users WHERE telegram_id = %s;", (uid,))
    user = cur.fetchone()
    if user:
        return user[0]
    else:
        bot.send_message(uid, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
        return None

def generate_markup():
    markup = types.ReplyKeyboardMarkup(row_width=2)
    markup.add(*buttons)
    return markup

def create_new_buttons(uid):
    global buttons
    buttons = []

    # –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–æ–±—â–∏–µ –∏–ª–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
    cur.execute("""
        SELECT rus, eng FROM words
        WHERE user_id IS NULL OR user_id = %s
        ORDER BY RANDOM() LIMIT 1;
    """, (uid,))
    word = cur.fetchone()
    if word:
        rus, eng = word
    else:
        rus, eng = '–ú–∏—Ä', 'Peace'

    target_word_btn = types.KeyboardButton(eng)
    buttons.append(target_word_btn)

    # –ü–æ–ª—É—á–∏—Ç—å –¥—Ä—É–≥–∏–µ —Å–ª–æ–≤–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–æ–±—â–∏–µ –∏–ª–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
    cur.execute("""
        SELECT eng FROM words
        WHERE (user_id IS NULL OR user_id = %s) AND eng != %s
        ORDER BY RANDOM() LIMIT 3;
    """, (uid, eng))
    others = cur.fetchall()
    others = [row[0] for row in others]
    if len(others) < 3:
        others.extend(['Green', 'White', 'Hello'])  # –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç

    other_words_btns = [types.KeyboardButton(word) for word in others]
    buttons.extend(other_words_btns)
    random.shuffle(buttons)

    next_btn = types.KeyboardButton(Command.NEXT)
    add_word_btn = types.KeyboardButton(Command.ADD_WORD)
    delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
    buttons.extend([next_btn, add_word_btn, delete_word_btn])

    return rus, eng, others

@bot.message_handler(commands=['start'])
def start(message):
    uid = message.chat.id
    cur.execute("SELECT id FROM users WHERE telegram_id = %s;", (uid,))
    user = cur.fetchone()
    if not user:
        cur.execute(
            "INSERT INTO users (telegram_id, username, first_name, last_name) VALUES (%s, %s, %s, %s)",
            (uid, message.chat.username, message.chat.first_name, message.chat.last_name)
        )
        conn.commit()
    bot.send_message(uid,
                     "–ü—Ä–∏–≤–µ—Ç! üëã –î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–∂–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —Å–µ–±—è —Ç–µ–º–ø–µ.")
    create_cards(message)

@bot.message_handler(commands=['cards'])
def create_cards(message):
    uid = message.chat.id
    target_word, translate, others = create_new_buttons(uid)
    markup = generate_markup()

    greeting = f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\nüá∑üá∫ {target_word}"
    bot.send_message(message.chat.id, greeting, reply_markup=markup)
    bot.set_state(message.from_user.id, MyStates.target_word, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['target_word'] = target_word
        data['translate_word'] = translate
        data['other_words'] = others

@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def next_cards(message):
    create_cards(message)

@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
def delete_word(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
    bot.set_state(message.from_user.id, MyStates.translate_word, message.chat.id)

@bot.message_handler(state=MyStates.translate_word)
def process_delete_word(message):
    uid = message.chat.id
    word_to_delete = message.text.strip()
    user_id = get_user_id(uid)
    cur.execute("DELETE FROM words WHERE eng = %s AND user_id = %s;", (word_to_delete, user_id))
    conn.commit()
    if cur.rowcount > 0:
        bot.send_message(message.chat.id, f"–°–ª–æ–≤–æ '{word_to_delete}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!")
    else:
        bot.send_message(message.chat.id, "–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Å–ª–æ–≤–∞.")
    bot.delete_state(message.from_user.id, message.chat.id)

@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
def add_word(message):
    bot.set_state(message.from_user.id, MyStates.another_words, message.chat.id)
    bot.send_message(message.chat.id,
                     "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–±–∞–∫–∞,dog):")

@bot.message_handler(state=MyStates.another_words)
def process_add_word(message):
    try:
        uid = message.chat.id
        rus, eng = message.text.split(',')
        rus = rus.strip()
        eng = eng.strip()

        # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = get_user_id(uid)
        if user_id is None:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
            return

        # –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ
        cur.execute("INSERT INTO words (rus, eng, user_id) VALUES (%s, %s, %s);", (rus, eng, user_id))
        conn.commit()
        bot.send_message(message.chat.id, f"–°–ª–æ–≤–æ '{rus} - {eng}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
        bot.delete_state(message.from_user.id, message.chat.id)
    except Exception as e:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        print(e)

@bot.message_handler(state=MyStates.target_word)
def check_translation(message):
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        target_word = data['target_word']
        translate_word = data['translate_word']
        other_words = data['other_words']

    if message.text == translate_word:
        bot.send_message(message.chat.id, "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ")
    else:
        bot.send_message(message.chat.id, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {translate_word}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.add_custom_filter(custom_filters.StateFilter(bot))
bot.infinity_polling()




